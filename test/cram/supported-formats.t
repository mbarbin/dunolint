In this file we monitor that we can still load the config from various
compatibility formats, until we explicitly decide to drop the support.

An empty file is a valid config.

  $ touch dunolint

  $ dunolint tools config validate dunolint

A config at the v0 format, with no mention of versions.

  $ cat > dunolint <<EOF
  > ((rules()))
  > EOF

  $ dunolint tools config validate dunolint

A simple 1.0 config with a single rule. Exercise the flag to print the config
back too.

  $ cat > dunolint <<EOF
  > (lang dunolint 1.0)
  > 
  > (rule (enforce (dune (instrumentation (backend bisect_ppx)))))
  > EOF

  $ dunolint tools config validate dunolint --print
  (lang dunolint 1.0)
  
  (rule (enforce (dune (instrumentation (backend bisect_ppx)))))

A simple 1.0 config with no stanzas but the version one.

  $ cat > dunolint <<EOF
  > (lang dunolint 1.0)
  > EOF

  $ dunolint tools config validate dunolint

The configs generated by the tests.

  $ ./lint_file_config_gen.exe --format=v0 > dunolint

  $ cat dunolint
  ;; This file is generated by [bin/lint_file_gen_config.ml]. Do not edit!
  ((version 0)
   ((skip_subtree (cond (((path (glob .git/*)) skip_subtree))))
    (rules
     ((cond
       (((path (glob vendor/*)) return)
        (true (enforce (dune_project (name (equals foo)))))))
      (cond (((path (glob _build/*)) skip_subtree)))))))

  $ dunolint tools config validate dunolint

  $ ./lint_file_config_gen.exe --format=v1 > dunolint

  $ cat dunolint
  ;; This file is generated by [bin/lint_file_gen_config.ml]. Do not edit!
  (lang dunolint 1.0)
  
  (skip_paths .git/*)
  
  (skip_paths _build/*)
  
  (rule
   (cond ((path (glob vendor/*)) return)
    (true (enforce (dune_project (name (equals foo)))))))

  $ dunolint tools config validate dunolint

The [flag] construct can be supplied wrapped or unwrapped with version 0.

Unwrapped:

  $ cat > dunolint <<EOF
  > ((rules
  >   ((enforce
  >     (dune
  >      (lint
  >       (pps
  >        (flag
  >         (name -allow-let-operators)
  >         (param none)
  >         (applies_to (pp ppx_js_style))))))))))
  > EOF

  $ dunolint tools config validate dunolint

Wrapped:

  $ cat > dunolint <<EOF
  > ((rules
  >   ((enforce
  >     (dune
  >      (lint
  >       (pps
  >        (flag
  >         ((name -allow-let-operators)
  >          (param none)
  >          (applies_to (pp ppx_js_style)))))))))))
  > EOF

  $ dunolint tools config validate dunolint

The [flag] construct must be supplied unwrapped with version 1.

Unwrapped:

  $ cat > dunolint <<EOF
  > (lang dunolint 1.0)
  > 
  > (rule
  >  (enforce
  >   (dune
  >    (lint
  >     (pps
  >      (flag
  >       (name -allow-let-operators)
  >       (param none)
  >       (applies_to (pp ppx_js_style))))))))
  > EOF

  $ dunolint tools config validate dunolint

Wrapped causes an error:

  $ cat > dunolint <<EOF
  > (lang dunolint 1.0)
  > 
  > (rule
  >  (enforce
  >   (dune
  >    (lint
  >     (pps
  >      (flag
  >       ((name -allow-let-operators)
  >        (param none)
  >        (applies_to (pp ppx_js_style)))))))))
  > EOF

  $ dunolint tools config validate dunolint
  File "dunolint", lines 8-11, characters 5-105:
   8 |      (flag
   9 |       ((name -allow-let-operators)
  10 |        (param none)
  11 |        (applies_to (pp ppx_js_style)))))))))
  Error: pps.t_of_sexp: polymorphic variant tag "flag" has incorrect number of
  arguments.
  [123]

When unwrapped, the errors for the inner parsing are located.

  $ cat > dunolint <<EOF
  > (lang dunolint 1.0)
  > 
  > (rule
  >  (enforce
  >   (dune
  >    (lint
  >     (pps
  >      (flag
  >       (invalid -allow-let-operators)
  >       (param none)
  >       (applies_to (pp ppx_js_style))))))))
  > EOF

  $ dunolint tools config validate dunolint
  File "dunolint", lines 8-11, characters 5-104:
   8 |      (flag
   9 |       (invalid -allow-let-operators)
  10 |       (param none)
  11 |       (applies_to (pp ppx_js_style))))))))
  Error: pps.flag.t_of_sexp: extra fields: invalid.
  [123]

There was a short period of time where dune lang versions were allowed to be
tuples, but we haved dropped the support for this. Now expeced "MAJOR.MINOR".

  $ cat > dunolint <<EOF
  > (lang dunolint 1.0)
  > 
  > (rule
  >  (enforce
  >   (dune_project (dune_lang_version (greater_than_or_equal_to 3.17)))))
  > EOF

  $ dunolint tools config validate dunolint
