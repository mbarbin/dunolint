(*********************************************************************************)
(*  Dunolint - A tool to lint and help manage files in dune projects             *)
(*  Copyright (C) 2024-2025 Mathieu Barbin <mathieu.barbin@gmail.com>            *)
(*                                                                               *)
(*  This file is part of Dunolint.                                               *)
(*                                                                               *)
(*  Dunolint is free software; you can redistribute it and/or modify it          *)
(*  under the terms of the GNU Lesser General Public License as published by     *)
(*  the Free Software Foundation either version 3 of the License, or any later   *)
(*  version, with the LGPL-3.0 Linking Exception.                                *)
(*                                                                               *)
(*  Dunolint is distributed in the hope that it will be useful, but WITHOUT      *)
(*  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or        *)
(*  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License  *)
(*  and the file `NOTICE.md` at the root of this repository for more details.    *)
(*                                                                               *)
(*  You should have received a copy of the GNU Lesser General Public License     *)
(*  and the LGPL-3.0 Linking Exception along with this library. If not, see      *)
(*  <http://www.gnu.org/licenses/> and <https://spdx.org>, respectively.         *)
(*********************************************************************************)

open! Import
module V0 = Config_v0
module V1 = Config_v1

module T = struct
  [@@@coverage off]

  type t =
    [ `v0 of V0.t
    | `v1 of V1.t
    ]

  let compare =
    (fun a__001_ ->
       fun b__002_ ->
       if Stdlib.( == ) a__001_ b__002_
       then 0
       else (
         match a__001_, b__002_ with
         | `v0 _left__003_, `v0 _right__004_ -> V0.compare _left__003_ _right__004_
         | `v1 _left__005_, `v1 _right__006_ -> V1.compare _left__005_ _right__006_
         | x, y -> Stdlib.compare x y)
     : t -> t -> int)
  ;;

  let equal =
    (fun a__007_ ->
       fun b__008_ ->
       if Stdlib.( == ) a__007_ b__008_
       then true
       else (
         match a__007_, b__008_ with
         | `v0 _left__009_, `v0 _right__010_ -> V0.equal _left__009_ _right__010_
         | `v1 _left__011_, `v1 _right__012_ -> V1.equal _left__011_ _right__012_
         | x, y -> Stdlib.( = ) x y)
     : t -> t -> bool)
  ;;
end

include T

(* When breaking changes are introduced, we'd mint new versions such as:

   {[
     module V0 = Config_v0
     module V1 = Config_v1
     module V2 = Config_v2

     type t =
       [ `v0 of V0.t
       | `v1 of V1.t
       | `v2 of V2.t
       ]
   ]}

   The evaluation engine is responsible for handing the different versions,
   accessing them using [Private.view]. *)

let to_stanzas : t -> Sexp.t list = function
  | `v0 v0 -> [ List [ List [ Atom "version"; Atom "0" ]; V0.sexp_of_t v0 ] ]
  | `v1 v1 -> List [ Atom "lang"; Atom "dunolint"; Atom "1.0" ] :: V1.to_stanzas v1
;;

let of_stanzas : Sexp.t list -> t = function
  | [ List [ List [ Atom "version"; (Atom version as version_sexp) ]; config ] ] ->
    (match version with
     | "0" -> `v0 (V0.t_of_sexp config)
     | _ ->
       raise
         (Sexp.Of_sexp_error
            ( Failure "The (version _) syntax is only supported with version 0."
            , version_sexp )))
  | List [ Atom "lang"; Atom "dunolint"; (Atom version as version_sexp) ] :: sexps ->
    (match version with
     | "1.0" -> `v1 (V1.of_stanzas sexps)
     | _ ->
       raise
         (Sexp.Of_sexp_error
            ( Failure (Printf.sprintf "Unsupported dunolint config version [%s]." version)
            , version_sexp )))
  | [ (List (List _ :: _) as sexp) ] -> `v0 (V0.t_of_sexp sexp)
  | [] -> `v0 (V0.create ())
  | sexp :: _ ->
    raise
      (Sexp.Of_sexp_error
         (Failure "Dunolint config expected to start with (lang dunolint VERSION).", sexp))
;;

let sexp_of_t (t : t) : Sexp.t = List (Atom "stanzas" :: to_stanzas t)
let v0 t = `v0 t
let v1 t = `v1 t

let to_file_contents t ~generated_by =
  String.concat
    ~sep:"\n"
    (Printf.sprintf ";; This file is generated by [%s]. Do not edit!" generated_by
     :: List.mapi (to_stanzas t) ~f:(fun i sexp ->
       (if i > 0 then "\n" else "") ^ Sexp.to_string_hum sexp))
;;

module Private = struct
  let view t = t
end

module Skip_subtree = Config_v0.Skip_subtree
module Rule = Config_v0.Rule
module Std = Config_v0.Std

let skip_subtree (t : t) =
  match t with
  | `v0 v0 -> V0.skip_subtree v0
  | `v1 v1 ->
    let open Config_v0.Std in
    let globs =
      List.map (V1.skip_paths v1 |> List.concat) ~f:(fun g -> Blang.base (`glob g))
    in
    Some (cond [ path (or_ globs), skip_subtree ])
;;

let rules (t : t) =
  match t with
  | `v0 v0 -> V0.rules v0
  | `v1 v1 -> V1.rules v1
;;

let create ?skip_subtree ?rules () = `v0 (V0.create ?skip_subtree ?rules ())
