(*********************************************************************************)
(*  Dunolint - A tool to lint and help manage files in dune projects             *)
(*  Copyright (C) 2024-2025 Mathieu Barbin <mathieu.barbin@gmail.com>            *)
(*                                                                               *)
(*  This file is part of Dunolint.                                               *)
(*                                                                               *)
(*  Dunolint is free software; you can redistribute it and/or modify it          *)
(*  under the terms of the GNU Lesser General Public License as published by     *)
(*  the Free Software Foundation either version 3 of the License, or any later   *)
(*  version, with the LGPL-3.0 Linking Exception.                                *)
(*                                                                               *)
(*  Dunolint is distributed in the hope that it will be useful, but WITHOUT      *)
(*  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or        *)
(*  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License  *)
(*  and the file `NOTICE.md` at the root of this repository for more details.    *)
(*                                                                               *)
(*  You should have received a copy of the GNU Lesser General Public License     *)
(*  and the LGPL-3.0 Linking Exception along with this library. If not, see      *)
(*  <http://www.gnu.org/licenses/> and <https://spdx.org>, respectively.         *)
(*********************************************************************************)

module V0 = Config_v0

type t = [ `v0 of V0.t ] [@@deriving compare, equal]

(* When breaking changes are introduced, we'd mint new versions such as:

   {[
     module V0 = Config_v0
     module V1 = Config_v1
     module V2 = Config_v2

     type t =
       [ `v0 of V0.t
       | `v1 of V1.t
       | `v2 of V2.t
       ]
   ]}

   The evaluation engine is responsible for handing the different versions,
   accessing them using [Private.view]. *)

module type To_sexp = sig
  type t

  val sexp_of_t : t -> Sexp.t
end

let to_versioned_sexp_internal
      (type a)
      (module T : To_sexp with type t = a)
      (a : a)
      ~version
  : Sexp.t
  =
  List [ List [ Atom "version"; Atom version ]; T.sexp_of_t a ]
;;

let to_versioned_sexp (t : t) : Sexp.t =
  match t with
  | `v0 v0 -> to_versioned_sexp_internal (module V0) v0 ~version:"0"
;;

let t_of_sexp (sexp : Sexp.t) =
  match sexp with
  | List [ List [ Atom "version"; Atom version ]; config ] ->
    (match version with
     | "0" -> `v0 (V0.t_of_sexp config)
     | _ -> failwith (Printf.sprintf "Unsupported dunolint config version %S." version))
  | _ -> `v0 (V0.t_of_sexp sexp)
;;

let sexp_of_t (t : t) =
  (* CR-someday mbarbin: This is part of a multi stages transition. 1. First
     we'll mint a release that introduces the support for parsing versioned
     sexps. 2. Then we'll change [sexp_of_t] to always use the versioned format
     (what is currently the behavior of [to_versioned_sexp]. *)
  match t with
  | `v0 v0 -> V0.sexp_of_t v0
;;

let v0 t = `v0 t

let to_file_contents t ~generated_by =
  String.concat
    ~sep:"\n"
    [ Printf.sprintf ";; This file is generated by [%s]. Do not edit!" generated_by
    ; Sexp.to_string_hum (to_versioned_sexp t)
    ]
;;

module Private = struct
  let view t = t

  module With_versioned_sexp = struct
    type nonrec t = t

    let sexp_of_t = to_versioned_sexp
    let t_of_sexp = t_of_sexp
    let equal = equal
    let compare = compare
  end
end

module Skip_subtree = Config_v0.Skip_subtree
module Rule = Config_v0.Rule
module Std = Config_v0.Std

let skip_subtree (t : t) =
  match t with
  | `v0 v0 -> V0.skip_subtree v0
;;

let rules (t : t) =
  match t with
  | `v0 v0 -> V0.rules v0
;;

let create ?skip_subtree ?rules () = `v0 (V0.create ?skip_subtree ?rules ())
