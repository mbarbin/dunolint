;; This file is generated by [src/config.ml]. Do not edit!
(lang dunolint 1.0)

(skip_paths **/.git/ .git/)

(skip_paths **/_build/ _build/)

(skip_paths **/_opam/ _opam/)

(skip_paths **/_coverage/ _coverage/)

(skip_paths **/node_modules/ node_modules/)

(skip_paths **/doc/build/ doc/build/)

(skip_paths **/.docusaurus/ .docusaurus/)

(rule
 (enforce (dune_project (dune_lang_version (greater_than_or_equal_to 3.17)))))

(rule
 (cond
  ((path (glob dunolint-config/**))
   (enforce (dune (library (public_name (is_prefix dunolint-tests.))))))
  ((path (or (glob lib/test_helpers/src/*) (glob test/expect/*)))
   (enforce (dune (library (public_name (is_prefix dunolint-tests.))))))
  ((path (glob **/test/*))
   (enforce
    (dune
     (library
      (and (public_name (is_prefix dunolint-tests.))
       (name (is_suffix _test)))))))
  ((path (glob lib/dunolint_base/src/*))
   (enforce (dune (library (public_name (equals dunolint-lib-base))))))
  ((path (or (glob lib/**) (glob vendor/**)))
   (enforce
    (dune
     (library
      (public_name
       (or (is_prefix dunolint.) (is_prefix dunolint-lib.)
        (equals dunolint-lib)))))))
  (true (enforce (dune (library (public_name (is_prefix dunolint-dev.))))))))

(rule
 (cond
  ((dune (preprocess (pps true)))
   (enforce
    (dune
     (preprocess
      (pps
       (flag (name -unused-code-warnings) (param (equals force))
        (applies_to driver)))))))))

(rule
 (cond
  ((path (glob vendor/**))
   (enforce (dune (library (not (has_field instrumentation))))))
  (true (enforce (dune (instrumentation (backend bisect_ppx)))))))

(rule
 (cond ((path (glob vendor/blang/**)) return)
  (true
   (enforce
    (dune
     (lint
      (pps
       (and (pp ppx_js_style)
        (flag (name -allow-let-operators) (param none)
         (applies_to (pp ppx_js_style)))
        (flag (name -check-doc-comments) (param none)
         (applies_to (pp ppx_js_style)))))))))))
